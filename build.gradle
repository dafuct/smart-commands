plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'application'
    id 'eclipse'
    id 'idea'
}

group = 'com.smartcommands'
version = '1.0.0'

java {
    sourceCompatibility = '21'
}

// Ensure Gradle wrapper compatibility
wrapper {
    gradleVersion = '8.5'
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    
    // Database
    implementation 'com.h2database:h2'
    implementation 'mysql:mysql-connector-java:8.0.33'
    
    // Javax Persistence API for Spring Boot 2.x
    implementation 'javax.persistence:javax.persistence-api:2.2'
    
    // HTTP Client for Ollama
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    
    // JSON Processing
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    
    // CLI Framework
    implementation 'info.picocli:picocli-spring-boot-starter:4.7.5'
    
    // Terminal handling
    implementation 'org.jline:jline:3.26.1'
    
    // Logging
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.slf4j:slf4j-api:2.0.9'
    
    // Utilities
    implementation 'org.apache.commons:commons-lang3:3.18.0'
    implementation 'org.apache.commons:commons-text:1.11.0'
    
    // Development Tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'

    compileOnly 'org.projectlombok:lombok:1.18.42'
    annotationProcessor 'org.projectlombok:lombok:1.18.42'

    testCompileOnly 'org.projectlombok:lombok:1.18.42'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.42'
}

tasks.named('test') {
    useJUnitPlatform()
}

application {
    mainClass = 'com.smartcommands.SmartCommandsApplication'
}

jar {
    enabled = false
}

bootJar {
    enabled = true
    archiveFileName = 'smart-commands.jar'
}

task createDirs {
    doLast {
        mkdir 'src/main/java/com/smartcommands/config'
        mkdir 'src/main/java/com/smartcommands/service'
        mkdir 'src/main/java/com/smartcommands/controller'
        mkdir 'src/main/java/com/smartcommands/model'
        mkdir 'src/main/java/com/smartcommands/util'
        mkdir 'src/main/resources'
        mkdir 'src/test/java/com/smartcommands'
        mkdir 'info'
        mkdir 'test_local'
    }
}

// IDE Configuration
eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = true
    }
    jdt {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

// Create a self-contained executable JAR with bundled Java runtime
tasks.register('createExecutableJar', Jar) {
    archiveBaseName = 'smart-commands-executable'
    destinationDirectory = layout.buildDirectory.dir('libs')

    manifest {
        attributes(
                'Main-Class': 'com.smartcommands.SmartCommandsApplication',
                'Implementation-Title': 'Smart Commands',
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'Smart Commands Team',
                'Created-By': 'Gradle',
                'Build-Jdk': System.getProperty('java.version'),
                'Built-By': System.getProperty('user.name')
        )
    }

    // Include all runtime dependencies
    from(configurations.runtimeClasspath).filter { it.isFile() }.collect { zipTree(it) }

    // Exclude signature files to avoid issues
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
}

// Compiler options to avoid warnings
compileJava {
    options.compilerArgs += [
        '-Xlint:unchecked',
        '-Xlint:deprecation',
        '-parameters'
    ]
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.compilerArgs += [
        '-Xlint:unchecked',
        '-Xlint:deprecation',
        '-parameters'
    ]
    options.encoding = 'UTF-8'
}

// Ensure all dependencies are resolved
configurations.configureEach {
    resolutionStrategy {
        cacheDynamicVersionsFor 0, 'seconds'
        cacheChangingModulesFor 0, 'seconds'
    }
}

// Add source sets for better IDE support
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

// Clean and rebuild task
tasks.register('cleanRebuild') {
    dependsOn clean, build
}